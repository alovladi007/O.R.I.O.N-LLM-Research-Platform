apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: orion-ingress
  namespace: orion-platform
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS, PATCH"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://orion-platform.ai"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
spec:
  tls:
  - hosts:
    - orion-platform.ai
    - api.orion-platform.ai
    - www.orion-platform.ai
    secretName: orion-tls
  rules:
  - host: orion-platform.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: orion-frontend
            port:
              number: 3000
  - host: www.orion-platform.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: orion-frontend
            port:
              number: 3000
  - host: api.orion-platform.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: orion-api
            port:
              number: 8000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: orion-websocket-ingress
  namespace: orion-platform
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "orion-api"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$arg_token"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
spec:
  tls:
  - hosts:
    - ws.orion-platform.ai
    secretName: orion-ws-tls
  rules:
  - host: ws.orion-platform.ai
    http:
      paths:
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: orion-api
            port:
              number: 8000
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@orion-platform.ai
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
---
apiVersion: v1
kind: Service
metadata:
  name: orion-frontend
  namespace: orion-platform
  labels:
    app: orion
    component: frontend
spec:
  type: ClusterIP
  selector:
    app: orion
    component: frontend
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http